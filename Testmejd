#!/bin/bash

# Initialisation des fichiers
minmaxFile='./lv_all_minmax.csv'
> "$minmaxFile"
outputFile='./sortie.csv'
> "$outputFile"

inputFile='./entree.csv'
> "$inputFile"

tempFile='./tmp.csv'
> "$tempFile"

# Fonction qui vérifie s'il y a le bon nombre d'arguments et s'ils sont cohérents
verification_arg(){
    if [ -z $1 ] || [ -z $2 ] || [ -z $3 ]; then
        echo "Arguments manquants"
        return 1
    else 
        if [ ! -f "$1" ]; then 
            echo "Le fichier n'existe pas"
            return 2
        else
            echo "Fichier existant, OK"
        fi
        a='indiv'
        b='all'
        c="comp"
        case $2 in
            'hvb'|'hva') 
                echo "Argument 2 valide"
                if [ "$3" == "$c" ]; then
                    echo "Argument 3 valide"
                else
                    echo "Erreur : argument 3 invalide"
                    return 3
                fi
            ;;
            'lv')
                echo "Argument 2 valide"
                if [ "$3" == "$a" ] || [ "$3" == "$b" ] || [ "$3" == "$c" ]; then
                    echo "Argument 3 valide"
                else
                    echo "Erreur : argument 3 invalide"
                    return 4
                fi
            ;;
            *)
                echo "Erreur : Argument 2 invalide"
                return 5
            ;;
        esac 
    fi
    if [ -z $5 ]; then
       echo "Pas d'aide"
    else
        d="-h"
        if [ "$5" != "$d" ]; then
            echo "Argument 5 invalide"
            return 6
        else
            aide
        fi  
    fi
    if [ -z $4 ]; then
        echo "Pas d'id de centrale"
    else
        e=5
        if (( "$4" > "$e" )); then
            echo "Argument 4 invalide"
            return 7
        else
            echo 'Argument 4 valide'
        fi
        return 0
    fi
}

# Fonction qui affiche une aide détaillée sur l'utilisation du script
aide(){
    echo -e "Utilisation : $0 <arg 1> <arg 2> <arg 3> <arg 4> <arg 5>\n"
    echo "Description : Ce script nécessite 3 à 5 arguments :"
    echo "- argument 1 : chemin du fichier d'entrée"
    echo "- argument 2 : type de station (hvb, hva ou lv)"
    echo "- argument 3 : type de consommateur (comp, indiv ou all)"
    echo "- argument 4 : OPTIONNEL - identifiant de la centrale"
    echo "- argument 5 : OPTIONNEL - (-h) pour afficher une aide"
    echo "Attention ! hvb et hva n'acceptent que le type de consommateur 'comp'"
}

verification_arg $1 $2 $3 $4 $5
res1=$?
if (( res1 != 0 )); then
    echo "$res1"
    aide
else
    echo 'OK'
fi

make -C ./codeC
if [ $? -ne 0 ]; then 
    echo 'Erreur : échec de la compilation'
    exit 1
fi

start_time=$(date +%s)

if [ -n "$4" ]; then 
    case $2 in
        'hvb')
            grep -E "^[0-9]+;[0-9]+;-;-;" "$1" | grep -E "$4;" | cut -f 2,7,8 -d ';' | tr '-' '0' | tr ';' ',' > "$inputFile"
        ;;
        'hva')
            grep -E "^[0-9]+;.;[0-9]+;-;" "$1" | grep -E "$4;" | cut -f 3,7,8 -d ';' | tr '-' '0' | tr ';' ',' > "$inputFile"
        ;;
        'lv')
            case $3 in
                'comp')
                    grep -E "^[^;]*;[^;]*;[^;]*;[0-9]+;[^;]*;-;" "$1" | grep -E "$4;" | cut -f 4,7,8 -d ';' | tr '-' '0' | tr ';' ',' > "$inputFile"
                ;;
                'indiv')
                    grep -E "^[^;]*;[^;]*;[^;]*;[0-9]+;-;[^;]*;" "$1" | grep -E "$4;" | cut -f 4,7,8 -d ';' | tr '-' '0' | tr ';' ',' > "$inputFile"
                ;;
                'all')
                    grep -E "^[^;]*;[^;]*;[^;]*;[0-9]+;[^;]*;[^;]*;" "$1" | grep -E "$4;" | cut -f 4,7,8 -d ';' | tr '-' '0' | tr ';' ',' > "$inputFile"
                ;;
            esac
        ;;
    esac
else
    case $2 in
        'hvb')
            grep -E "^[0-9]+;[0-9]+;-;-;" "$1" | cut -f 2,7,8 -d ';' | tr '-' '0' | tr ';' ',' > "$inputFile"
        ;;
        'hva')
            grep -E "^[0-9]+;[^;]*;[0-9]+;-;" "$1" | cut -f 3,7,8 -d ';' | tr '-' '0' | tr ';' ',' > "$inputFile"
        ;;
        'lv')
            case $3 in
                'comp')
                    grep -E "^[^;]*;[^;]*;[^;]*;[0-9]+;[^;]*;-;" "$1" | cut -f 4,7,8 -d ';' | tr '-' '0' | tr ';' ',' > "$inputFile"
                ;;
                'indiv')
                    grep -E "^[^;]*;[^;]*;[^;]*;[0-9]+;-;[^;]*;" "$1" | cut -f 4,7,8 -d ';' | tr '-' '0' | tr ';' ',' > "$inputFile"
                ;;
                'all')
                    grep -E "^[^;]*;[^;]*;[^;]*;[0-9]+;[^;]*;[^;]*;" "$1" | cut -f 4,7,8 -d ';' | tr '-' '0' | tr ';' ',' > "$inputFile"
                ;;
            esac
        ;;
    esac
fi

start_time2=$(date +%s)
./codeC/test < "$inputFile"
end_time2=$(date +%s)
duration2=$(( end_time2 - start_time ))
echo "Temps d'exécution : ${duration2}.0 sec"

if [ "$2" = "lv" ] && [ "$3" = "all" ]; then
    sort -t ',' -k 3,3n "$outputFile" > "$2_$3.csv"
    head -n 5 "$2_$3.csv" > "$tempFile"
    tail -n 5 "$2_$3.csv" >> "$tempFile"
    while IFS= read -r ligne; do
        capa=$(echo "$ligne" | cut -d',' -f2)
        conso=$(echo "$ligne" | cut -d',' -f3)
        qaec=$((conso - capa))
        echo "$ligne,$qaec" >> "$minmaxFile"
    done < "$tempFile"
    cp "$minmaxFile" "$tempFile"
    sort -t ',' -k 4,4nr "$tempFile" | cut -f 1,2,3 -d ',' > "$minmaxFile"
    echo "Station,Capacité,Consommation" | cat - "$minmaxFile" > temp && mv temp "$minmaxFile"
else
    sort -t ',' -k 2,2n "$outputFile" > "$2_$3.csv"
fi
